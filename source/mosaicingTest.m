imagepath = 'camera_simulation/testimages/panorama.png';

% thetaCheckpoints = ...
%     [pi/8, pi/8, 0; ...
%     -pi/8, -pi/8, 0];
% omegas = ...
%     [-0.01, -0.01, 0];

% thetaCheckpoints = ...
%    [pi/4, pi/4, 0 ; ...
%    -pi/4, -pi/4, -pi; ...
%    pi/4, -pi/4, 0; ...
%    -pi/4, pi/4, 2*pi];
% omegas = ...
%     0.0001 * ...
%     [-1, -1, -2; ...
%     1, 0, 2; ...
%     -1, 1, 4];

% thetaCheckpoints = ...
%    [pi/8, pi/4, 0 ; ...
%    -pi/8, -pi/4, -pi; ...
%    pi/8, -pi/4, 0; ...
%    -pi/8, pi/4, 2*pi];
% omegas = 0.00001 * ...
%     [-1 -2 -4; ...
%     1 0 4; ...
%     -1 2 8];

% thetaCheckpoints = ...
%     [pi/4, pi/4, 0; ...
%     pi/4, -pi/4, 0; ...
%     0, -pi/4, 0; ...
%     0, pi/4, 0; ...
%     -pi/4, pi/4, 0; ...
%     -pi/4, -pi/4, 0; ...
%     pi/4, -pi/4, 0; ...
%     pi/4, 0, 0; ...
%     -pi/4, 0, 0; ...
%     -pi/4, pi/4, 0; ...
%     pi/4, pi/4, 0];
% omegas = ...
%     0.0001 * ...
%     [0, -1, 0; ...
%     -1, 0, 0; ...
%     0, 1, 0; ...
%     -1, 0, 0; ...
%     0, -1, 0; ...
%     1, 0, 0; ...
%     0, 1, 0; ...
%     -1, 0, 0; ...
%     0, 1, 0; ...
%     1, 0, 0];

% omegas = repmat(0.000001*[-1 -1 0; 1 -1 0], 3, 1);
omegas = 0.000001*[-1 -1 0];

thetaCheckpoints = ...
    [0 0 0; ...
    100000*omegas(1,:)]; ...
%     250000*omegas(1,:) + 250000*omegas(2,:); ...
%     500000*omegas(1,:) + 250000*omegas(2,:); ...
%     500000*omegas(1,:) + 500000*omegas(2,:); ...
%     750000*omegas(1,:) + 500000*omegas(2,:); ...
%     750000*omegas(1,:) + 750000*omegas(2,:)];

% omegas = ...
%     0.000001 * ...
%     [-1 -1 1; ...
%     0 1 1; ...
%     1 -1 1];
% 
% thetaCheckpoints = ...
%     1000000 * ...
%     [0 0 0; ...
%     omegas(1,:); ...
%     omegas(1,:) + omegas(2,:); ...
%     omegas(1,:) + omegas(2,:) + omegas(3,:)];

% omegas = ...
%     [0 -0.000001 0.000001; ...
%     0 0.000001 0.000001; ...
%     0 -0.000001 0.000001];
% 
% thetaCheckpoints = ...
%     [0 0 0; ...
%     1000000*omegas(1,:); ...
%     1000000*omegas(1,:) + 2000000*omegas(2,:); ...
%     2000000*omegas(1,:) + 2000000*omegas(2,:)];

% omegas = ...
%     [0 0 0.000001];
% 
% thetaCheckpoints = ...
%     [0 0 0; ...
%     0 0 pi];

if size(thetaCheckpoints, 1) ~= size(omegas, 1) + 1
    error('number of checkpoints and velocities inconsistent');
end

tic;

allAddr = [];
allTS = 0; %set first number 0 to have reference for first bunch of stamps
allThetas = [];
intermediateState = zeros(simulationPatchSize());

for i = 1:size(thetaCheckpoints, 1) - 1
    
    fprintf('simulating subpath %d/%d\n', i, size(thetaCheckpoints, 1) - 1);
    
    [addr, ts, thetas, intermediateState] = flyDiffCam2(imagepath, thetaCheckpoints(i, :), thetaCheckpoints(i+1, :), omegas(i, :), intermediateState);
    
    allAddr = [allAddr; addr];
    allTS = [allTS; ts + allTS(end)];
    allThetas = [allThetas; thetas];   
end
% [allAddr, allTS, thetas] = flyDiffCam2(imagepath, thetaStart, thetaStop, omega);

allTS = allTS(2:end); %remove pending 0;

toc

% outputImageSize = [500, 1000];
% boundary_image = 0.5*ones(outputImageSize);

[img, gradients] = reconstructMosaic(allAddr, allTS, allThetas);

figure('Name', 'Reconstruction of mosaicingTest');
imshow(img);
